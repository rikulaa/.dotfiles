#!/bin/sh

# get local aliases (not under version control)
if [ -f "$HOME/.aliases" ]; then
    # shellcheck source=$HOME/.aliases
    . "$HOME/.aliases"
fi

# ======== CONFIGURATIONS ============
DOTFILES_DIR=$HOME/.dotfiles

alias zshrc='$EDITOR $ZDOTDIR/.zshrc'
alias bashrc='$EDITOR $HOME/.bashrc'
alias vimrc='$EDITOR $XDG_CONFIG_HOME/nvim/init.lua'
alias aliases='$EDITOR $XDG_CONFIG_HOME/aliases'
alias aliases_local='$EDITOR $HOME/.aliases'
alias gitconfig='$EDITOR $XDG_CONFIG_HOME/git/config'
alias dotfiles='cd $DOTFILES_DIR'
alias tmuxconf='$EDITOR $HOME/.tmux.conf'
alias dotenv='$EDITOR $XDG_CONFIG_HOME/env'
alias playground='cd ~/src/me/playground'
alias vi='$EDITOR'
alias bm='nd'
alias art='php artisan'

alias sshconfig='$EDITOR ~/.ssh/config'

alias g='git'
# Use completion for git aliases (in zsh)
if [ -n "$ZSH_VERSION" ]; then
        compdef g='git'
fi 
# alias bin='cd ~/.local/bin'

alias school='cd ~/src/school'
# alias work='cd ~/src/work'
# alias me='cd ~/src/me'
alias docs='cd ~/Documents'
# alias notes='cd ~/Documents/notes/'
alias worknotes='$EDITOR ~/Documents/notes/work/index.adoc'
alias devd='open https://devdocs.io/'

alias nixinfo='nix-shell -p nix-info --run "nix-info -m"'
alias todo='$EDITOR $HOME/Documents/todos/index.adoc'

# Use bat instead of cat if possible
if command -v bat > /dev/null; then
    alias cat='bat --paging=never'
fi

# ======== FILE SYSTEM ============

# for setting colors in ls
if ls --color > /dev/null 2>&1; then
    # gnu 
    colorflag="--color"
else
    # osx
    colorflag="-G"
fi

alias l="ls -al $colorflag"

# extend cd to always list files when navigating
cd() {
    # builtin cd "$@" && ls -l $colorflag
    builtin cd "$@" && l
}

# # move backwards more easily
goBack() {
    cd .. 
}
alias ..='cd ..'

tree() {
    find "$@" | sed -e 's;[^/]*/;|____;g;s;____|; |;g' 
}

alias vpn='cd /etc/openvpn/'

alias www='cd /var/www/ && ls'

# create delete folders
alias rmd='rm -Rf'
alias touchd='mkdir'

alias dirs='dirs -v'

case $(uname) in
    Darwin)
        ;;
    *)
        # Use 'pbcopy' command for accessing clipboard (as it's used on osx)
        alias pbcopy='xclip -selection clipboard'
        alias pbpaste='xclip -selection clipboard -o'
        ;;
esac

alias sizeof='du -sh'

rm_fzf() {
    for file in $(fzf --multi); do
        echo "deleting $file"
        rm "$file"
    done
}

## ======== OTHER ============
alias php-server='php -S localhost:8000' 


if [ -x "$(command -v nvim)" ]; then
    alias vim="nvim"
    alias v='nvim'
    alias vimdiff='nvim -d'
else
    if [ -x "$(command -v vim)" ]; then
        alias vim="vim"
        alias v='vim'
    else
        alias vim="vi"
        alias v='vi'
    fi
fi

# ======== APPLICATIONS ============
#
alias browser='python -m webbrowser -t'


# TMUX
# Force tmux to open in 256 colour mode
alias tmux='tmux -2'
alias tmd='tmux detach'
alias tmas='tmux attach'
alias tmks='tmux kill-session'
alias tmkp='tmux kill-pane'
alias tmkw='tmux kill-window'

# Create new sessions
tm() {
    if [ -n "$1" ]; then
        name=$1
    else
        name=$(basename "$PWD" | sed -E 's/\.//g')
    fi

    tmux has -t "$name"
    has_session=$?

    
    if [ $has_session -eq 1 ]; then
        tmux new-session -n vim -d -s "$name"
        tmux new-window -n terminal
        tmux split-window -h
        tmux attach-session -d -t "$name:vim"

    else
        echo "Session with $name already exists!"
    fi
}

# tmux attach session
tma() {
    # check if fzf is installed (allows to use interactive selector)
    if [ -x "$(command -v fzf)" ]; then
        # get sessions
        sessions=$(tmux list-sessions -F '#{session_name}')
        # get session count with wc
        sessions_count=$(echo "{$sessions}" | wc -l)

        # check if any sessions exists
        if [  "$sessions_count" -gt 0 ]; then
            target_session=$(tmux list-sessions | fzf --reverse | sed 's/\([a-zA-z0-9]:\).*/\1/')
            if [ -n "$target_session" ]; then
                tmux attach -t "$target_session"
            fi
        fi
    else
        # fzf not found, use the default 'attach' command
        tmux attach
    fi
}


# DOCKER
alias d-c='docker-compose'
alias docker-stop-all='docker kill $(docker ps -q)'
alias docker-rm-containers='docker rm $(docker ps -a -q)'
alias docker-rm-images=' docker rmi $(docker images -q)'
dockerps() {
    item=$(docker ps | sed 1d | fzf)
    echo "$item"
}
dockerps_name() {
    docker ps | awk '{ print $NF }' | tail -n +2 | fzf
}
alias docker-restart='docker restart $(dockerps)'
docker_exec() {
    docker exec -it $(dockerps_name) "$@"
}

# REACT NATIVE 
alias rn='react-native'

# ANDROID-STUDIO
alias react-native-android-emulator='/Users/rikulaa/Library/Android/sdk/tools/emulator -avd react-native -netdelay none -netspeed full'

# Uses ten 'process slots' by default
alias snip='make -f .snippets'

## Functions
h() {
    if ! [ -x "$(command -v fzf)" ]; then
        echo 'Error: FZF is not installed.' >&2
        exit 1
    fi

    # Strip numbers and dates before the actual command (for both zsh and bash)
    # Strip all the whitespace from the beginning
    eval "$(history | sed 's/[0-9]\{1,\}[-]\{0,1\}[:]\{0,2\}//g' | sed 's/^[ ]*//g' | fzf)"
}

ttouch() {
    mkdir -p "$(dirname "$1")" && touch "$1" ;
}


goto() {
    if ! [ -x "$(command -v fzf)" ]; then
        echo 'Error: FZF is not installed.' >&2
        exit 1
    fi

    location=$(find . -type d | fzf)
    echo "$location"
    
    if [ -x $location ]; then
        cd $location
    fi
}
