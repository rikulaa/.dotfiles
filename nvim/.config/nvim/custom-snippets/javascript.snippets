extends common

snippet af
(${1}) => {
	${2}
}
endsnippet

snippet fn
function ${1}(${2}) {
	${3}
}
endsnippet

snippet const
const ${1} = ${2};
endsnippet


snippet let
let ${1} = ${2};
endsnippet

snippet action
export const ${1} = type('$1');
export const ${2} = action($1, ${4:});
endsnippet

snippet sagawatch
function* $4(${5}) {
}

function* ${1}() {
  yield ${2}(${3}, ${4});
}
endsnippet

snippet sagafork

endsnippet

snippet cl
console.log(${1});
${2}
endsnippet
snippet cw
console.warn(${1});
endsnippet

snippet req
const ${1} = require('${2}');
endsnippet

snippet im "import xyz from 'xyz'"
import ${1} from '${2:$1}';
endsnippet

snippet imp "import PropTypes from 'prop-types'"
import PropTypes from 'prop-types';
endsnippet

snippet imsc
import styled from 'styled-components';
endsnippet

# React
snippet ir
import React from 'react';
endsnippet

snippet irc
import React, {Component} from 'react';
endsnippet

snippet con
constructor(props) {
 super(props);
 ${1}
}

endsnippet

snippet cdm
componentDidMount() {
	${1}
}
endsnippet

snippet cdup
componentDidUpdate(prevProps, prevState) {
	${1}
}
endsnippet

snippet cwm
componentWillMount() {
	${1}
}
endsnippet

snippet cwr
componentWillReceiveProps(nextProps) {
	${1}
}
endsnippet

snippet cwum
componentWillUnmount() {
	${1}
}
endsnippet

snippet cwu
componentWillUpdate(nextProps, nextState) {
	${1}
}
endsnippet


snippet dp
static defaultProps = {
	${1}: ${2},
}
endsnippet

snippet st
state = {
	${1}: ${2},
}
endsnippet

snippet pt
${1}.propTypes = {
	${2}
};
endsnippet

snippet rcc
class ${1:ClassName} extends Component {
	render() {
		return (
			${0:<div />}
		);
	}
}
endsnippet

snippet rcf
import React from 'react';

const ${1} = (${2}) => {
	return (
		${3}
	);
}
export default $1;
endsnippet

snippet ue
useEffect(() => {
	${2}
}, [${1}]);
endsnippet

snippet us
const [${1}, ${2}] = useState(${3});
endsnippet


snippet ren
render() {
	return (
		${1:<div />}
	);
}
endsnippet

snippet sst
this.setState({
	${1}
});
endsnippet

snippet cn
className="${1}"
endsnippet

snippet esl
/* eslint ${1}: ${2:0} */
endsnippet
snippet esldnl
/* eslint-disable-next-line */
endsnippet

snippet for
for (let i = ${1}; i < ${2}; i++) {
${3}
}
endsnippet

snippet while
while (${1}) {
${2}
}
endsnippet

snippet getproptypes
static get propTypes() {
	return {
		${1}
	};
}
endsnippet

snippet try
try {
	${1}
} catch (e) {

}
endsnippet

snippet getinitialprops
static async getInitialProps() {
	return {
		${1}
	};
}
endsnippet

snippet pfunc
PropTypes.func
endsnippet
snippet pbool
PropTypes.bool
endsnippet
snippet pstring
PropTypes.string
endsnippet
snippet pshape
PropTypes.shape({${1}})
endsnippet
snippet parray
PropTypes.array
endsnippet
snippet parrayOf
PropTypes.arrayOf(${1})
endsnippet
snippet preq
.isRequired
endsnippet
snippet pnode
PropTypes.node
endsnippet
snippet poneoftype
PropTypes.oneOfType
endsnippet
snippet poneof
PropTypes.oneOf
endsnippet
snippet pnumber
PropTypes.number
endsnippet
snippet pisr
isRequired
endsnippet


snippet constructor
constructor(props) {
super(props);

}
endsnippet

snippet doc
/**
 * ${1}
 *
 */
endsnippet

snippet mex
module.exports${1} = ${2}

endsnippet
snippet ex
export 
endsnippet
snippet exd
export default 
endsnippet
snippet exc
export const 
endsnippet

snippet settimeout
setTimeout(
() => {
${1}
},
${2}
);
endsnippet

snippet if
if (${1}) {
	${2}
}

endsnippet

snippet map
${1}.map((${2}) => ${3});
endsnippet

snippet red
${1}.reduce((acc, cur) => ${2});
endsnippet

snippet t
t('$1')
endsnippet
